{
    "New Controller": {
        "prefix": "contr",
        "body": [
"using Interject.Classes;",
"using Microsoft.AspNetCore.Mvc;",
"using Microsoft.Data.SqlClient;",
"using System;",
"using System.Collections.Generic;",
"using System.Data;",
"using System.Linq;",
"using System.Threading.Tasks;",
"",
"namespace Interject.API",
"{",
"    // [Authorize] //security is currently out of scope of the project. This will be added at a later phase prior to production use.",
"    [ApiController]",
"    [Route(\"api/v1/[controller]\")]",
"    public class ${1}Controller : ControllerBase",
"    {",
"        private readonly InterjectRequestHandler _requestHandler;",
"        public ${1}Controller(InterjectRequestHandler requestHandler)",
"        {",
"            _requestHandler = requestHandler;",
"        }",
"",
"        /// <summary>",
"        /// ",
"        /// </summary>",
"        /// <param name=\"interjectRequest\">",
"        /// The <see cref=\"InterjectRequest\"/> object to process.",
"        /// </param>",
"        [HttpPost]",
"        [ProducesResponseType(typeof(InterjectResponse)200)]",
"        public async Task<InterjectResponse> Post([FromBody] InterjectRequest interjectRequest)",
"        {",
"            _requestHandler.Init(interjectRequest);",
"            _requestHandler.ConvertParameters(new ${1}ParameterConverter());",
"            await _requestHandler.FetchDataAsync(new ${1}DataConnection());",
"            _requestHandler.ConvertResponseData(new ${1}ResponseConverter());",
"            return _requestHandler.PackagedResponse;",
"        }",
"",
"        public class ${1}ParameterConverter : IParameterConverter",
"        {",
"            public void Convert(InterjectRequestHandler handler)",
"            {",
"                throw new NotImplementedException();",
"            }",
"        }",
"",
"        public class ${1}DataConnection : IDataConnection",
"        {",
"            public async Task FetchDataAsync(InterjectRequestHandler handler)",
"            {",
"                throw new NotImplementedException();",
"            }",
"",
"            public void FetchData(InterjectRequestHandler handler)",
"            {",
"                throw new NotImplementedException();",
"            }",
"        }",
"",
"        public class ${1}ResponseConverter : IResponseConverter",
"        {",
"            public void Convert(InterjectRequestHandler handler)",
"            {",
"                throw new NotImplementedException();",
"            }",
"        }",
"    }",
"}"
        ],
    "description": "Adds the scaffolding of a controller with the Interject Request Pipeline",
    }
}