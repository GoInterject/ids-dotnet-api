{
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Interject .NET API Documentation | Your Project Title",
    "keywords": "Welcome to the Interject .NET API Documentation This documentation provides an overview of the ids-dotnet-api project, including examples, topics, and getting started guides. Table of Contents Getting Started The Getting Started section provides an introduction to the project and instructions on setting up the environment, along with basic tutorials to get you up and running. Deploy To Azure Examples In the Examples section, youâ€™ll find hands-on examples and code snippets to demonstrate various functionalities of the project. jColumnDef Topics The Topics section contains detailed explanations and conceptual information regarding different parts of the project. If you need a deep dive into specific subjects, this is the place to go. Topic 1: Core Concepts Topic 2: Configuration Options Topic 3: Performance Optimization Static Resources We also provide additional static resources, including images and assets used throughout the documentation. You can browse these resources directly: Images Further Documentation For additional resources and API references, please check the following: API Documentation - Automatically generated API documentation from code. Project Repository - Visit our GitHub repository for source code and issues. Support If you encounter any issues or need help, feel free to reach out via: Issue Tracker - Report issues or feature requests. Contact Us - Get in touch with the support team. Happy documenting!"
  },
  "source/pages/examples/jColumnDef.html": {
    "href": "source/pages/examples/jColumnDef.html",
    "title": "Working with the jColumnDef Formula | Your Project Title",
    "keywords": "Working with the jColumnDef Formula The jColumnDef formula can be used to get extra details about a column such as source, year or custom defined segments for accounting purposes. The example below shows how to configue the spreadsheet report with the formula and how to access the data the formula provides from the data api side. The Report The Data Portal With the report configured, now we need to make sure the data portal on the Interject customer portal site includes either the system parameter, Interject_ColDefItems or Interject_RequestContext . The Data API From the data API side, Column Definition Items can be accessed from the request object with the GetColDefItems method of the InterjectRequest object. This will return a list of InterjectColDefItems that represent each column of the report. To access the column attributes from the jColumnDef formula, access variables in the InterjectColDefItem.Json hashmap as shown below with item.Json[\"<KEY>\"] . All available keys are show below in the json object. // how to iterate over column def items and get jColumnDef attributes List<InterjectColDefItem> colDefItems = interjectRequest.GetColDefItems(); foreach (InterjectColDefItem item in colDefItems) { Console.Write(item.ToString()); String period = item.Json[\"P\"]; } // sample json data stored in InterjectRowColItem.Json hashmap { \"S\": \"actual\", \"P\": \"1\", \"Y\": \"2022\", \"V\": \"A\", \"S1\": \"asdh\", \"S2\": \"23\", \"S3\": \"234\", \"S4\": \"fff\", \"S5\": \"85kk-sdf\", \"S6\": \"ss\", \"S7\": \"ffgh\", \"S8\": \"f78\", \"B\": \"2347889\" }"
  },
  "source/pages/examples/jDropdown.html": {
    "href": "source/pages/examples/jDropdown.html",
    "title": "Example for jDropdown | Your Project Title",
    "keywords": "Example for jDropdown 1) Setting Up A Data Connection Ensure a data connection exists for a running data api on the interject portal - https://portal.gointerject.com/DataPortalConnections.html For directions on how to setup a Data Connection for an API, see: https://docs.gointerject.com/wPortal/L-Api-Connections.html 2) Setting Up A Data Portal Create a new data portal on the portal site - https://portal.gointerject.com/DataPortals.html Add the Interject_RequestContext system parameter (Optional) Add other Formula Parameters For directions on how to set up a Data Portal for an API, see: https://docs.gointerject.com/wPortal/Data-Portals.html 3) Configure the jDropdown Function in the Excel Report Configure the Target Cell. This is the cell that the data will be inserted in. Configure the Value Column Name. This is the name of the column returned to Interject from the data source. (Optional) Configure the data portal parameters. For a full working example report, see the jDropdown Tab in the example.xlsx file. For directions on how to set up a jDropdown, see: https://docs.gointerject.com/wGetStarted/L-Create-Dropdowns.html For documentation on the jDropdown function, see: https://docs.gointerject.com/wIndex/jDropdown.html 4) Create A Post Endpoint on Data API To Process the Data Request Here is a working example of a jDropdown endpoint: /// <summary> /// Test endpoint for a ReportLookup function. /// </summary> /// <param name=\"interjectRequest\"> /// The <see cref=\"InterjectRequest\"/> object to process. /// </param> [HttpPost(\"jDropdown\")] [ProducesResponseType(typeof(InterjectResponse), 200)] public InterjectResponse TestJDropdown([FromBody] InterjectRequest interjectRequest) { // Create an instance of the InterjectResponse to return by passing in the // InterjectRequest from the request. This copies the parameter list from // the request into the response. InterjectResponse response = new(interjectRequest); try { // Add the columns IdsTable idsTable = new(); idsTable.AddColumn(new IdsColumn(\"CompanyName\")); idsTable.AddRow(new() { \"Northwind Data Company\" }); idsTable.AddRow(new() { \"Northwind InfoTech\" }); idsTable.AddRow(new() { \"Northwind Bytes\" }); idsTable.AddRow(new() { \"Northwind Security\" }); idsTable.AddRow(new() { \"Northwind Research\" }); idsTable.Print(); response.AddReturnedData(idsTable); } catch (Exception e) { Console.WriteLine(e.Message); Console.Write(e.StackTrace); response.ErrorMessage = e.Message; } return response; }"
  },
  "source/pages/examples/MultiRowdefCols.html": {
    "href": "source/pages/examples/MultiRowdefCols.html",
    "title": "Multi-Col RowDef Items | Your Project Title",
    "keywords": "Multi-Col RowDef Items The RowDefRange parameter defines a range of RowDefItems. The RowDefItems define where to map the data being returned to Interject from the API for a ReportFixed or ReportVariable . Starting with Interject ver 2.5x, this RowDefRange can be a multi-column range. In this case, the combination of column values provide a unique key for matching up the data. RowDef Items The RowDef Items are packaged as XML by Interject and parsed in the object InterjectRequestContext.RowDefItems . In order for Interject to match up the data for these RowDef Items, there needs to be a column returned from the API called \"RowDefName.\" If the data source does not return a column called \"RowDefName\", Interject will use the value defined in the Column Definition range in the same column as the RowDef Items. Example 1 - Multiple Column RowDefRange The Report The following is an Excel report that shows multiple columns in the RowDefRange. Note the columns \"div\" and \"loc\" are the 2 columns that constitute the RowDefRange. In order to process the data to be returned to this report, the columns need to have matching names in the IDS Table (\"div\" and \"loc\"). * This report can be found in the example.xlsx report in the examples folder. Code [HttpPost(\"ReportVariable\")] [ProducesResponseType(typeof(InterjectResponse), 200)] public InterjectResponse TestReportVariable([FromBody] InterjectRequest interjectRequest) { // Create an instance of the InterjectResponse to return by passing in the // InterjectRequest from the request. This copies the parameter list from // the request into the response. InterjectResponse response = new(interjectRequest); var requestContext = interjectRequest.GetRequestContext(); try { // (Optional) Get Data Portal formula parameter values. string reportParam1 = interjectRequest.GetParameterValue<string>(\"CompanyName\"); string reportParam2 = interjectRequest.GetParameterValue<string>(\"ContactName\"); string reportParam3 = interjectRequest.GetParameterValue<string>(\"CustomerID\"); // (Optional) Process Column Definition Items. List<InterjectColDefItem> colDefItems = interjectRequest.GetColDefItems(); colDefItems.ForEach(item => { Console.WriteLine(item.ToXML()); }); // (Optional) Process Row Definition Items. List<InterjectRowDefItem> rowDefItems = interjectRequest.GetRowDefItems(); rowDefItems.ForEach(item => { Console.WriteLine(item.ToXML()); }); foreach (InterjectColDefItem item in colDefItems) { Console.Write(item.ToString()); } // Assemble data to return to Interject to be populated on the spreadsheet. IdsTable table = new(); table.AddColumn(new(\"div\")); table.AddColumn(new(\"loc\")); table.AddColumn(new(\"acct\")); table.AddColumn(new(\"MTD\")); table.AddColumn(new(\"QTD\")); table.AddColumn(new(\"YTD\")); table.AddRow(new() { \"701\", \"123\", \"3333\", \"94.30\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"123\", \"3334\", \"94.31\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"124\", \"3334\", \"94.32\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"124\", \"3334\", \"94.33\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"124\", \"3335\", \"94.34\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"223\", \"3333\", \"94.35\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"224\", \"3334\", \"94.36\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"225\", \"3333\", \"94.37\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"703\", \"320\", \"3334\", \"94.38\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"703\", \"320\", \"3335\", \"94.39\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"703\", \"321\", \"3333\", \"94.40\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"703\", \"321\", \"3335\", \"94.41\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"705\", \"501\", \"3335\", \"94.42\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"705\", \"520\", \"3333\", \"94.43\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"705\", \"520\", \"3334\", \"94.44\", \"904.34\", \"9804.34\" }); // (Optional) Show contents of Interject Table object. Console.Write(table.ToString()); // (Required) Add the table to the InterjectResponse object. response.AddReturnedData(table); } catch (Exception e) { Console.WriteLine(e.Message); Console.Write(e.StackTrace); response.ErrorMessage = e.Message; } return response; } } Example 2 - Single Column RowDefRange Using Pipe Delimiter The Report This example uses a single column for the RowDefRange but some of the entries contain multiple values delimited by the default pipe delimiter '|'. Note there is no value in B2 and it is not needed as the data returned includes the column \"RowDefName\". * This report can be found in the example.xlsx report in the examples folder. Code [HttpPost(\"ReportRowDef\")] [ProducesResponseType(typeof(InterjectResponse), 200)] public InterjectResponse TestRowDef([FromBody] InterjectRequest interjectRequest) { // Create an instance of the InterjectResponse to return by passing in the // InterjectRequest from the request. This copies the parameter list from // the request into the response. InterjectResponse response = new(interjectRequest); var requestContext = interjectRequest.GetRequestContext(); try { // (Optional) Get Data Portal formula parameter values. string reportParam1 = interjectRequest.GetParameterValue<string>(\"CompanyName\"); string reportParam2 = interjectRequest.GetParameterValue<string>(\"ContactName\"); string reportParam3 = interjectRequest.GetParameterValue<string>(\"CustomerID\"); // (Optional) Process Column Definition Items. List<InterjectColDefItem> colDefItems = interjectRequest.GetColDefItems(); colDefItems.ForEach(item => { Console.WriteLine(item.ToXML()); }); // (Optional) Process Row Definition Items. List<InterjectRowDefItem> rowDefItems = interjectRequest.GetRowDefItems(); rowDefItems.ForEach(item => { Console.WriteLine(item.ToXML()); }); foreach (InterjectColDefItem item in colDefItems) { Console.Write(item.ToString()); } // Assemble data to return to Interject to be populated on the spreadsheet. IdsTable table = new(); table.AddColumn(new(\"RowDefName\")); table.AddColumn(new(\"div\")); table.AddColumn(new(\"loc\")); table.AddColumn(new(\"acct\")); table.AddColumn(new(\"MTD\")); table.AddColumn(new(\"QTD\")); table.AddColumn(new(\"YTD\")); table.AddRow(new() { \"701\", \"701\", \"123\", \"3333\", \"94.30\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"701\", \"123\", \"3334\", \"94.31\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"701\", \"124\", \"3334\", \"94.32\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"701\", \"124\", \"3334\", \"94.33\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"701\", \"124\", \"3335\", \"94.34\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"702\", \"223\", \"3333\", \"94.35\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"702\", \"224\", \"3334\", \"94.36\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"702\", \"225\", \"3333\", \"94.37\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"702\", \"225\", \"3334\", \"94.38\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"702\", \"225\", \"3335\", \"94.39\", \"904.34\", \"9804.34\" }); // (Optional) Show contents of Interject Table object. Console.Write(table.ToString()); // (Required) Add the table to the InterjectResponse object. response.AddReturnedData(table); } catch (Exception e) { Console.WriteLine(e.Message); Console.Write(e.StackTrace); response.ErrorMessage = e.Message; } return response; } } Example 3 - RowDefRange Explicitly Labeled The Report This example uses multiple columns for the RowDefRange but each RowDefItem is explicitly labeled in the code (i.e. R00001, R00002, etc.). Therefore, there you can name the row def item anything in the report. * This report can be found in the example.xlsx report in the examples folder. Code [HttpPost(\"ReportRowDefName\")] [ProducesResponseType(typeof(InterjectResponse), 200)] public InterjectResponse TestRowDefName([FromBody] InterjectRequest interjectRequest) { // Create an instance of the InterjectResponse to return by passing in the // InterjectRequest from the request. This copies the parameter list from // the request into the response. InterjectResponse response = new(interjectRequest); var requestContext = interjectRequest.GetRequestContext(); try { // (Optional) Get Data Portal formula parameter values. string reportParam1 = interjectRequest.GetParameterValue<string>(\"CompanyName\"); string reportParam2 = interjectRequest.GetParameterValue<string>(\"ContactName\"); string reportParam3 = interjectRequest.GetParameterValue<string>(\"CustomerID\"); // (Optional) Process Column Definition Items. List<InterjectColDefItem> colDefItems = interjectRequest.GetColDefItems(); colDefItems.ForEach(item => { Console.WriteLine(item.ToXML()); }); // (Optional) Process Row Definition Items. List<InterjectRowDefItem> rowDefItems = interjectRequest.GetRowDefItems(); rowDefItems.ForEach(item => { Console.WriteLine(item.ToXML()); }); foreach (InterjectColDefItem item in colDefItems) { Console.Write(item.ToString()); } // Assemble data to return to Interject to be populated on the spreadsheet. IdsTable table = new(); table.AddColumn(new(\"RowDefName\")); table.AddColumn(new(\"div\")); table.AddColumn(new(\"loc\")); table.AddColumn(new(\"acct\")); table.AddColumn(new(\"MTD\")); table.AddColumn(new(\"QTD\")); table.AddColumn(new(\"YTD\")); table.AddRow(new() { \"R00001\", \"701\", \"123\", \"3333\", \"94.30\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00001\", \"701\", \"123\", \"3334\", \"94.31\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00001\", \"701\", \"124\", \"3334\", \"94.32\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00001\", \"701\", \"124\", \"3334\", \"94.33\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00001\", \"701\", \"124\", \"3335\", \"94.34\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00002\", \"702\", \"223\", \"3333\", \"94.35\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00002\", \"702\", \"224\", \"3334\", \"94.36\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00002\", \"702\", \"225\", \"3333\", \"94.37\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00002\", \"702\", \"225\", \"3334\", \"94.38\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00002\", \"702\", \"225\", \"3335\", \"94.39\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00003\", \"703\", \"320\", \"3335\", \"94.35\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00003\", \"703\", \"321\", \"3335\", \"94.36\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00003\", \"703\", \"322\", \"3333\", \"94.37\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00003\", \"703\", \"322\", \"3334\", \"94.38\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"R00003\", \"703\", \"322\", \"3335\", \"94.39\", \"904.34\", \"9804.34\" }); // (Optional) Show contents of Interject Table object. Console.Write(table.ToString()); // (Required) Add the table to the InterjectResponse object. response.AddReturnedData(table); } catch (Exception e) { Console.WriteLine(e.Message); Console.Write(e.StackTrace); response.ErrorMessage = e.Message; } return response; }"
  },
  "source/pages/examples/PortalParameters.html": {
    "href": "source/pages/examples/PortalParameters.html",
    "title": "Data Portal Parameters | Your Project Title",
    "keywords": "Data Portal Parameters Data portal parameters allow you to get specific data inputs from the spreadsheet through Interject. There are two types of parameters: Formula and System. Formula Parameters Formula parameters are defined and customized by the developers and users of Interject. They must first be set up on the Interject Portal Site . To use them in the Excel Report, you must define the Parameters parameter in the report function: ReportRange ReportFixed ReportVariable ReportLookup ReportSave Once the report functions are configured to use parameters, the data API code can get the values from those parameters through the InterjectRequest object. using Interject.Api; // this request will come from the .NET Framework in the data api InterjectRequest interjectRequest // get formula parameter object from request RequestParameter param = interjectRequest.GetParameter(\"Param1\") // OR..... get formula parameter values from request string reportParam1 = interjectRequest.GetParameterValue<string>(\"Param1\"); int reportParam2 = interjectRequest.GetParameterValue<int>(\"Param2\"); float reportParam3 = interjectRequest.GetParameterValue<float>(\"param3\"); System Paramaters System parameters are defined by Interject but can be included in any Data Portal and will be included in the InterjectRequest.RequestParameterList . Once configured on the Interject Portal Site , they will be passed to the data API or database from Excel and can be parsed out similar to formula parameters. Below are the system parameters and objects currently handled: // Currently handled getters for system parameters InterjectRequestContext requestContext = interjectRequest.GetRequestContext(); String ntLogin = interjectRequest.GetParameterValue<string>(\"Interject_NTLogin\"); String excelVersion = interjectRequest.GetParameterValue<string>(\"Interject_ExcelVersion\"); String returnError = interjectRequest.GetParameterValue<string>(\"Interject_ReturnError\"); float localTimeZoneOffset = interjectRequest.GetParameterValue<float>(\"Interject_LocalTimeZoneOffset\"); String sourceFileAndPath = interjectRequest.GetParameterValue<string>(\"Interject_SourceFileAndPath\"); String sourceFilePathAndTab = interjectRequest.GetParameterValue<string>(\"Interject_SourceFilePathAndTab\"); String userID = interjectRequest.GetParameterValue<string>(\"Interject_UserID\"); String loginName = interjectRequest.GetParameterValue<string>(\"Interject_LoginName\"); String userRoles = interjectRequest.GetParameterValue<string>(\"Interject_UserRoles\"); String clientID = interjectRequest.GetParameterValue<string>(\"Interject_ClientID\"); The system parameter \"Interject_RequestContext\" will also bring a number of other objects with it that can be queried. // Currently handled getters for objects in the system parameter \"Interject_RequestContext\" IdsTable table = interjectRequest.GetXmlDataToSave(); List<InterjectRowDefItem> rowDefItems = interjectRequest.GetRowDefItems(); List<InterjectColDefItem> colDefItems = interjectRequest.GetColDefItems(); String excelVersion = interjectRequest.GetRequestContext().ExcelVersion; String userID = interjectRequest.GetRequestContext().UserContext.UserId; String clientID = interjectRequest.GetRequestContext().UserContext.ClientId; String loginName = interjectRequest.GetRequestContext().UserContext.LoginName; String machineLoginName = interjectRequest.GetRequestContext().UserContext.MachineLoginName; String machineName = interjectRequest.GetRequestContext().UserContext.MachineName; String fullName = interjectRequest.GetRequestContext().UserContext.FullName; String loginDateUtc = interjectRequest.GetRequestContext().UserContext.LoginDateUtc; String userRoles = interjectRequest.GetRequestContext().UserContext.UserRoles; String idsVersion = interjectRequest.GetRequestContext().IdsVersion; String fileName = interjectRequest.GetRequestContext().FileName; String filePath = interjectRequest.GetRequestContext().FilePath; String tabName = interjectRequest.GetRequestContext().TabName; String cellRange = interjectRequest.GetRequestContext().CellRange; String sourceFunction = interjectRequest.GetRequestContext().SourceFunction; String utcOffset = interjectRequest.GetRequestContext().UtcOffset;"
  },
  "source/pages/examples/ReportFixed.html": {
    "href": "source/pages/examples/ReportFixed.html",
    "title": "Example for ReportFixed | Your Project Title",
    "keywords": "Example for ReportFixed 1) Setting Up A Data Connection Ensure a data connection exists for a running data api on the interject portal - https://portal.gointerject.com/DataPortalConnections.html For directions on how to setup a Data Connection for an API, see: https://docs.gointerject.com/wPortal/L-Api-Connections.html 2) Setting Up A Data Portal Create a new data portal on the portal site - https://portal.gointerject.com/DataPortals.html Add the Interject_RequestContext system parameter (Optional) Add other Formula Parameters For directions on how to set up a Data Portal for an API, see: https://docs.gointerject.com/wPortal/Data-Portals.html 3) Configure the ReportFixed Function in the Excel Report Configure the data range (RowDefRange). This is a single column that defines what column is used as a key to match incoming data with and what range of rows data should be populated on. Configure the columns definitions (ColDefRange). This range defines what columns are sent to the data api. (Optional) If multiple column attributes are needed per column (i.e. financials may need Source, Period, Year, etc.), configure jColumnDef() and replace a column name as a string with jColumnDef() . For an example of this, see: https://docs.gointerject.com/wGetStarted/L-Create-FinancialFixed.html (Optional) Configure the data portal parameters. For a full working example report, see the ReportFixed Tab in the example.xlsx file. For directions on how to set up a ReportFixed report, see: https://docs.gointerject.com/wGetStarted/L-Create-InventoryFixed.html For documentation on the ReportFixed function, see: https://docs.gointerject.com/wIndex/ReportFixed.html 4) Create A Post Endpoint on Data API To Process the Data Request Here is a working example of a ReportFixed endpoint: /// <summary> /// Test endpoint for a ReportFixed function. /// </summary> /// <param name=\"interjectRequest\"> /// The <see cref=\"InterjectRequest\"/> object to process. /// </param> [HttpPost(\"ReportFixed\")] [ProducesResponseType(typeof(InterjectResponse), 200)] public InterjectResponse TestReportFixed([FromBody] InterjectRequest interjectRequest) { // Create an instance of the InterjectResponse to return by passing in the // InterjectRequest from the request. This copies the parameter list from // the request into the response. InterjectResponse response = new(interjectRequest); IdsUserContext userContext = interjectRequest.UserContext(); string roles = userContext.UserRoles; try { // (Optional) Get Data Portal formula parameter values. string reportParam1 = interjectRequest.GetParameterValue<string>(\"CompanyName\"); string reportParam2 = interjectRequest.GetParameterValue<string>(\"ContactName\"); string reportParam3 = interjectRequest.GetParameterValue<string>(\"CustomerID\"); IdsTable idsTable = new(); // (Optional) Process Column Definition Items. List<InterjectColDefItem> colDefItems = interjectRequest.GetColDefItems(); foreach (var item in colDefItems) { IdsColumn ic = new(item.ColumnName); idsTable.AddColumn(ic); } // (Optional) Process Row Definition Items List<InterjectRowDefItem> rowDefItems = interjectRequest.GetRowDefItems(); foreach (var item in rowDefItems) { string div = item.GetValueString(\"Div\"); string acct = item.GetValueString(\"Acct\"); List<string> newRow = new() { div, // RowDefItem acct, // RowDefItem \"94.34\", // MTD \"904.34\", // QTD \"9804.34\" // YTD }; idsTable.AddRow(newRow); } idsTable.Print(); response.AddReturnedData(idsTable); } catch (Exception e) { Console.WriteLine(e.Message); Console.Write(e.StackTrace); response.ErrorMessage = e.Message; } return response; }"
  },
  "source/pages/examples/ReportLookup.html": {
    "href": "source/pages/examples/ReportLookup.html",
    "title": "Example for ReportLookup | Your Project Title",
    "keywords": "Example for ReportLookup 1) Setting Up A Data Connection Ensure a data connection exists for a running data api on the interject portal - https://portal.gointerject.com/DataPortalConnections.html For directions on how to setup a Data Connection for an API, see: https://docs.gointerject.com/wPortal/L-Api-Connections.html 2) Setting Up A Data Portal Create a new data portal on the portal site - https://portal.gointerject.com/DataPortals.html Add the Interject_RequestContext system parameter (Optional) Add other Formula Parameters For directions on how to set up a Data Portal for an API, see: https://docs.gointerject.com/wPortal/Data-Portals.html 3) Configure the ReportLookup Function in the Excel Report Configure the target data range (TargetDataRange). This is a multi-row range that defines where the data will be placed in the report. Configure the colum definition (ColDefRange). This is a single cell that defines the column of the data source. (Optional) Configure the data portal parameters. For a full working example report, see the ReportLookup Tab in the example.xlsx file. For documentation on the ReportLookup function, see: https://docs.gointerject.com/wIndex/ReportLookup.html 4) Create A Post Endpoint on Data API To Process the Data Request Here is a working example of a ReportLookup endpoint: /// <summary> /// Test endpoint for a ReportLookup function. /// </summary> /// <param name=\"interjectRequest\"> /// The <see cref=\"InterjectRequest\"/> object to process. /// </param> [HttpPost(\"ReportLookup\")] [ProducesResponseType(typeof(InterjectResponse), 200)] public InterjectResponse TestReportLookup([FromBody] InterjectRequest interjectRequest) { // Create an instance of the InterjectResponse to return by passing in the // InterjectRequest from the request. This copies the parameter list from // the request into the response. InterjectResponse response = new(interjectRequest); try { // (Optional) Get Data Portal formula parameter values. string reportParam1 = interjectRequest.GetParameterValue<string>(\"CompanyName\"); string reportParam2 = interjectRequest.GetParameterValue<string>(\"ContactName\"); string reportParam3 = interjectRequest.GetParameterValue<string>(\"CustomerID\"); // Add the columns IdsTable idsTable = new(); idsTable.AddColumn(new IdsColumn(\"ytd\")); idsTable.AddRow(new() { \"123456.78\" }); idsTable.Print(); response.AddReturnedData(idsTable); } catch (Exception e) { Console.WriteLine(e.Message); Console.Write(e.StackTrace); response.ErrorMessage = e.Message; } return response; }"
  },
  "source/pages/examples/ReportRange.html": {
    "href": "source/pages/examples/ReportRange.html",
    "title": "Example for ReportRange | Your Project Title",
    "keywords": "Example for ReportRange 1) Setting Up A Data Connection Ensure a data connection exists for a running data api on the interject portal - https://portal.gointerject.com/DataPortalConnections.html For directions on how to setup a Data Connection for an API, see: https://docs.gointerject.com/wPortal/L-Api-Connections.html 2) Setting Up A Data Portal Create a new data portal on the portal site - https://portal.gointerject.com/DataPortals.html Add the Interject_RequestContext system parameter (Optional) Add other Formula Parameters For directions on how to set up a Data Portal for an API, see: https://docs.gointerject.com/wPortal/Data-Portals.html 3) Configure the ReportRange Function in the Excel Report Configure the target data range (TargetDataRange). This is a multi-row range that defines where the data will be placed in the report. Configure the data range (RowDefRange). This is a single column that defines what column is used as a key to match incoming data with and what range of rows data should be populated on. Configure the colum definitions (ColDefRange). This range defines what columns are sent to the data api. (Optional) Configure the data portal parameters. For a full working example report, see the ReportRange Tab in the example.xlsx file. For directions on how to set up a ReportRange report, see: https://docs.gointerject.com/wGetStarted/L-Create-CustomerAging.html For documentation on the ReportRange function, see: https://docs.gointerject.com/wIndex/ReportRange.html 4) Create A Post Endpoint on Data API To Process the Data Request Here is a working example of a ReportRange endpoint: /// <summary> /// Test endpoint for a ReportFixed function. /// </summary> /// <param name=\"interjectRequest\"> /// The <see cref=\"InterjectRequest\"/> object to process. /// </param> [HttpPost(\"ReportRange\")] [ProducesResponseType(typeof(InterjectResponse), 200)] public InterjectResponse TestReportRange([FromBody] InterjectRequest interjectRequest) { // Create an instance of the InterjectResponse to return by passing in the // InterjectRequest from the request. This copies the parameter list from // the request into the response. InterjectResponse response = new(interjectRequest); try { // (Optional) Get Data Portal formula parameter values. string reportParam1 = interjectRequest.GetParameterValue<string>(\"CompanyName\"); string reportParam2 = interjectRequest.GetParameterValue<string>(\"ContactName\"); string reportParam3 = interjectRequest.GetParameterValue<string>(\"CustomerID\"); // Add the columns IdsTable idsTable = new(); idsTable.AddColumn(new IdsColumn(\"div\")); idsTable.AddColumn(new IdsColumn(\"acct\")); idsTable.AddColumn(new IdsColumn(\"MTD\")); idsTable.AddColumn(new IdsColumn(\"QTD\")); idsTable.AddColumn(new IdsColumn(\"YTD\")); // Add the rows List<List<string>> rows = new(); for (int i = 0; i < 10; i++) { List<string> newRow = new() { \"701\", \"333\" + i, \"94.34\", \"904.34\", \"9804.34\" }; rows.Add(newRow); } for (int i = 0; i < 10; i++) { idsTable.AddRow(rows[i]); } // (Optional) Filter the table // string acctParam = interjectRequest.GetParameterValue<string>(\"account\"); // idsTable.Filter(\"acct\", acctParam); idsTable.Print(); response.AddReturnedData(idsTable); } catch (Exception e) { Console.WriteLine(e.Message); Console.Write(e.StackTrace); response.ErrorMessage = e.Message; } return response; }"
  },
  "source/pages/examples/ReportSave.html": {
    "href": "source/pages/examples/ReportSave.html",
    "title": "Example for ReportSave | Your Project Title",
    "keywords": "Example for ReportSave 1) Setting Up A Data Connection Ensure a data connection exists for a running data api on the interject portal - https://portal.gointerject.com/DataPortalConnections.html For directions on how to setup a Data Connection for an API, see: https://docs.gointerject.com/wPortal/L-Api-Connections.html 2) Setting Up A Data Portal Create a new data portal on the portal site - https://portal.gointerject.com/DataPortals.html Add the Interject_XMLDataToSave system parameter (Optional) Add other Formula Parameters For directions on how to set up a Data Portal for an API, see: https://docs.gointerject.com/wPortal/Data-Portals.html 3) Configure the ReportSave Function in the Excel Report Configure the data range (RowDefRange). This is a single column that defines the unique row IDs taht will be used to save the rows. Configure the column definitions (ColDefRange). This range defines what columns are sent to the data api. (Optional) Configure the results range colums (ResultsRange). This range defines what columns are populated when the data is returned. (Optional) Configure the data portal parameters. For a full working example report, see the ReportSave Tab in the example.xlsx file. For directions on how to set up a ReportSave report, see: https://docs.gointerject.com/wGetStarted/L-Dev-CustomerCreditSave.html For documentation on the ReportSave function, see: https://docs.gointerject.com/wIndex/ReportSave.html 4) Create A Post Endpoint on Data API To Process the Save Data Here is a working example of a ReportSave endpoint: /// <summary> /// Test endpoint for a ReportSave function. /// </summary> /// <param name=\"interjectRequest\"> /// The <see cref=\"InterjectRequest\"/> object to process. /// </param> [HttpPost(\"ReportSave\")] [ProducesResponseType(typeof(InterjectResponse), 200)] public InterjectResponse TestReportSave([FromBody] InterjectRequest interjectRequest) { // Create an instance of the InterjectResponse to return by passing in the // InterjectRequest from the request. This copies the parameter list from // the request into the response. InterjectResponse response = new(interjectRequest); try { // Get the data from the spreadsheet. var requestContext = interjectRequest.GetRequestContext(); IdsTable table = requestContext.XmlDataToSave; // (Optional) Get Data Portal formula parameter values. string reportParam1 = interjectRequest.GetParameterValue<string>(\"CompanyName\"); string reportParam2 = interjectRequest.GetParameterValue<string>(\"ContactName\"); string reportParam3 = interjectRequest.GetParameterValue<string>(\"CustomerID\"); // (Optional) Use data from the spreadsheet for your logic here. //List<string> list = table.GetColumnValues(\"Notes\"); // (Optional) Add columns and row data for ReportSave's 'ResultsRange' table.AddColumn(new(\"Status\")); table.Update(\"Status\", 1, \"Updated!\"); response.AddReturnedData(table); // (Optional) Show contents of Interject Table object. Console.Write(table.ToString()); } catch (Exception e) { Console.WriteLine(e.Message); Console.Write(e.StackTrace); response.ErrorMessage = e.Message; } return response; }"
  },
  "source/pages/examples/ReportVariable.html": {
    "href": "source/pages/examples/ReportVariable.html",
    "title": "Example for ReportVariable | Your Project Title",
    "keywords": "Example for ReportVariable 1) Setting Up A Data Connection Ensure a data connection exists for a running data api on the interject portal - https://portal.gointerject.com/DataPortalConnections.html For directions on how to setup a Data Connection for an API, see: https://docs.gointerject.com/wPortal/L-Api-Connections.html 2) Setting Up A Data Portal Create a new data portal on the portal site - https://portal.gointerject.com/DataPortals.html Add the Interject_RequestContext system parameter (Optional) Add other Formula Parameters For directions on how to set up a Data Portal for an API, see: https://docs.gointerject.com/wPortal/Data-Portals.html 3) Configure the ReportVariable Function in the Excel Report Configure the data range (RowDefRange). This is a single column that defines what column is used as a key to match incoming data with and what range of rows data should be populated on. Configure the column definitions (ColDefRange). This range defines what columns are sent to the data api. (Optional) If multiple column attributes are needed per column (i.e. financials may need Source, Period, Year, etc.), configure jColumnDef() and replace a column name as a string with jColumnDef() . For an example of this, see: https://docs.gointerject.com/wGetStarted/L-Create-FinancialVariable.html (Optional) Configure the data portal parameters. For a full working example report, see the ReportVariable Tab in the example.xlsx file. For directions on how to set up a ReportVariable report, see: https://docs.gointerject.com/wGetStarted/L-Create-InventoryVariable.html For documentation on the ReportVariable function, see: https://docs.gointerject.com/wIndex/ReportVariable.html 4) Create A Post Endpoint on Data API To Process the Data Request Here is a working example of a ReportVariable endpoint: /// <summary> /// Test endpoint for a ReportVariable function. /// </summary> /// <param name=\"interjectRequest\"> /// The <see cref=\"InterjectRequest\"/> object to process. /// </param> [HttpPost(\"ReportVariable\")] [ProducesResponseType(typeof(InterjectResponse), 200)] public InterjectResponse TestReportVariable([FromBody] InterjectRequest interjectRequest) { // Create an instance of the InterjectResponse to return by passing in the // InterjectRequest from the request. This copies the parameter list from // the request into the response. InterjectResponse response = new(interjectRequest); var requestContext = interjectRequest.GetRequestContext(); try { // (Optional) Get Data Portal formula parameter values. string reportParam1 = interjectRequest.GetParameterValue<string>(\"CompanyName\"); string reportParam2 = interjectRequest.GetParameterValue<string>(\"ContactName\"); string reportParam3 = interjectRequest.GetParameterValue<string>(\"CustomerID\"); // (Optional) Process Column Definition Items. List<InterjectColDefItem> colDefItems = interjectRequest.GetColDefItems(); colDefItems.ForEach(item => { Console.WriteLine(item.ToXML()); }); // (Optional) Process Row Definition Items. List<InterjectRowDefItem> rowDefItems = interjectRequest.GetRowDefItems(); rowDefItems.ForEach(item => { Console.WriteLine(item.ToXML()); }); foreach (InterjectColDefItem item in colDefItems) { Console.Write(item.ToString()); } // Assemble data to return to Interject to be populated on the spreadsheet. IdsTable table = new(); table.AddColumn(new(\"div\")); table.AddColumn(new(\"loc\")); table.AddColumn(new(\"acct\")); table.AddColumn(new(\"MTD\")); table.AddColumn(new(\"QTD\")); table.AddColumn(new(\"YTD\")); table.AddRow(new() { \"701\", \"123\", \"3333\", \"94.30\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"123\", \"3334\", \"94.31\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"124\", \"3334\", \"94.32\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"124\", \"3334\", \"94.33\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"701\", \"124\", \"3335\", \"94.34\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"223\", \"3333\", \"94.35\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"224\", \"3334\", \"94.36\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"702\", \"225\", \"3333\", \"94.37\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"703\", \"320\", \"3334\", \"94.38\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"703\", \"320\", \"3335\", \"94.39\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"703\", \"321\", \"3333\", \"94.40\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"703\", \"321\", \"3335\", \"94.41\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"705\", \"501\", \"3335\", \"94.42\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"705\", \"520\", \"3333\", \"94.43\", \"904.34\", \"9804.34\" }); table.AddRow(new() { \"705\", \"520\", \"3334\", \"94.44\", \"904.34\", \"9804.34\" }); // (Optional) Show contents of Interject Table object. Console.Write(table.ToString()); // (Required) Add the table to the InterjectResponse object. response.AddReturnedData(table); } catch (Exception e) { Console.WriteLine(e.Message); Console.Write(e.StackTrace); response.ErrorMessage = e.Message; } return response; }"
  },
  "source/pages/examples/UserMessages.html": {
    "href": "source/pages/examples/UserMessages.html",
    "title": "Responding with Messages | Your Project Title",
    "keywords": "Responding with Messages There are numerous ways to return messages to users both at the data row level and the application level. User Messages User Messages can be configured on the response object by setting the UserMessage property of the InterjectResponse object before returning the response. This provides a popup in the addin to the user. using Interject.Api; // construct a response InterjectResponse response = new(interjectRequest); // set a user message response.UserMessage =\"Please use a different input!!!\"; // return response return response; Error Messages Error Messages can be configured on the response object by setting the ErrorMessage property of the InterjectResponse object before returning the response. This describes an error in the formula details field of the pull\\save window. using Interject.Api; // construct a response InterjectResponse response = new(interjectRequest); // set a user message response.ErrorMessage =\"A critical error occured during the query!\"; // return response return response; Data Portal Formula Parameter Error Messages Error Messages can also be specified for specific parameters by setting the validation attribute seen below. using Interject.Api; // construct a response InterjectResponse response = new(interjectRequest); // set a error message for a specific parameter interjectRequest.GetParameter(\"Param1\").UserValidationMessage = \"Param1 requires a better input!\"; // return response return response; ReportSave Result Columns The ReportSave function has the ability to send data from the sheet to a data api or database. In addition, this function also can populate the spreadsheet with data returned from the data api or database via the ResultsRange . When this parameter is defined in the Excel report, the columns included in this range will be populated with the corresponding columns in the data returned to interject. Example Data Sent To the API From Interject // data the api gets from excel TableName: Table1 Columns: Row, col, col2, Data: 11, 123, name, 12, 55, null, 13, 12, another, Add A Status Column and Set the Data using Interject.Api; // this adds a column for status, then updates a row with a status message for the user IdsTable table = requestContext.XmlDataToSave; table.AddColumn(new(\"Status\")); table.Update(\"Status\", 1, \"Updated!\"); Example Data Sent Back To Interject From the API // data the api sends back to excel TableName: Table1 Columns: Row, col, col2, status, Data: 11, 123, name, null, 12, 55, null, updated!, 13, 12, another, null, What Is Displayed in the Report"
  },
  "source/pages/getting_started/DeployToAzure.html": {
    "href": "source/pages/getting_started/DeployToAzure.html",
    "title": "How to Deploy Project Using Visual Studio | Your Project Title",
    "keywords": "How to Deploy Project Using Visual Studio Go to folder ./ids-dotnet-api/interject.data.api/interject.data.api/ and open project using Visual Studio InterjectDotnetApi.csproj Build project Publish Project Add configuration to Azure Setup App setting in Azure Name: Authority Value: https://live-interject-authapi.azurewebsites.net Add connection strings using the following Add connection Name: {ConnectionName}_{ClientPublicID} Connection String: Reset site to include changes made to connection strings and web app settings Confirm that site is up (you may need to start the site) https://{subUrl}.azurewebsites.net/api/v1/status How to Set Up A Data Connection on the Interject Data Portal Site Setup the connection in the portal site to match the config Connection String Create a Data Port"
  },
  "source/pages/topics/HandlerPipeline.html": {
    "href": "source/pages/topics/HandlerPipeline.html",
    "title": "Working with the Interject Request Handler Pipeline | Your Project Title",
    "keywords": "Working with the Interject Request Handler Pipeline The Requesthandler class is used as a pipeline to connect with a data in a flexible workflow. Data can be fetched, converted, and transferred back to Interject via this class. ### Working With the Pipeline ### Connection Strings ### SQL Controller ### How To Add A New Controller Working With the Pipeline The RequestHandler creates a pipeline for processing the InterjectRequest object sent from the Interject Addin. This class contains a few properties that are intended for use as the request passes through the phases of the request pipeline. The pipeline uses Dependency Injection to consume classes derived from interfaces. It passes itself as a parameter to each of the interface's methods to expose access to the rest of the class. Those phases and interfaces are as follows: Initialize the RequestHandler Convert the RequestParameters (IParameterConverter) Fetch the data (IDataConnection) Convert the data (IResponseConverter) Return the InterjectResponse object Connection Strings For the purpose of the SqlController example, this API uses the appsettings.json to hold connections strings. On startup, the program will initialize these strings in Configurations. The connection strings are available via dependency injection by requiring a ConnectionStringOptions object in the controller's constructor. The InterjectRequest.PassThroughCommand will contain the ConnectionStringName. The connection is established by initializing the SqlDataConnectionAsync object with the connection strings. Sql Controller The SqlController class is an example using the RequestHandler pipeline. The following outlines the pipeline flow used in this example: Inits the RequestHandler Inits the Handler. ParameterConverter Inits the Handler. DataConnectionAsync Inits the Handler. ResponseConverter Returns the Response by calling Handler. ReturnResponseAsync There are 4 internal classes in this example: SqlParameterConverter : Used to convert the data types of the parameters sent by Interject from the Excel Report to the API. Data types must be converted first to be used to fetch data. SqlDataConnectionAsync : Used to establish a connection with the data source. Establishes the connection string, parameters, and fetches data. ParamPair : Class for holding a pair of parameters, one from the Interject request and its converted SQL parameter. SqlResponseConverter : Class for converting the data fetched from the data source to a format Interject can consume. How to Add A New Controller Each controller will likely represent either a connection to a particular type of data source or a logical collection of endpoints for a series of reports. Each endpoint should follow the basic pipeline flow for handling a request. See Working with the request pipeline for more details. Using the first example there is an SQLController included in this project already. Here is how to create a new controller template. This will create the controller with one endpoint, and four classes; one for each of the interfaces. Note that the IDataConnectionAsync and IDataConnection are interchangeable depending on your needs and only one can be used per endpoint. Create a new file in the Controllers directory using the naming convention {Name}Controller.cs. Use code snippets in VS Code to scaffold the controller. The prefix is 'c-pipe'. > c-pipe > TAB Type the {Name} of the controller as prompted by the snippet and press TAB You can now begin to customize your Pipeline interface implementations. 1) Instantiate the InterjectRequestHandler Create an instance of the InterjectRequestHandler passing the InterjectRequest into the constructor. This will instantiate a new InterjectResponse object and store the InterjectRequest . The constructor will also instantiate a couple other data storage properties described below for use in the rest of the pipeline. The initial InterjectRequest.RequestParameterList is also transferred to the InterjectResponse.RequestParameterList to ensure the Interject add-in at least receives the original parameters in the response. It is also possible to replace or manipulate those returned parameters during the pipeline if needed. 2) Convert the RequestParameters (IParameterConverter) The data source you are creating the controller for will likely need the parameters passed in the request to be either converted to another class type or to be otherwise processed before they can be used to fetch the data. The InterjectRequestHandler.ConvertedParameters property is a collection of generic object type intended for storing the processed parameters to be used in the next phase. Since the collection is a list of generic object you can place a collection of any type needed. 3) Fetch the data (IDataConnection) OR (IDataConnectionAsync) The Interface can use an implementation of either a sync or async fetch method. However, only one implementation can be used per endpoint. Note that the InterjectRequestHandler.ReturnResponse() and InterjectRequestHandler.ReturnResponseAsync() use those implementations respectively. The data returned is intended to be stored in the InterjectRequestHandler.ReturnData property until the IResponseConverter derived class can transform it to the collection of ReturnedData in the InterjectRequestHandler.InterjectResponse . 4) Convert the data (IResponseConverter) Once the data has been returned from the data source, it needs to be converted into the form the Interject Addin can consume. See the InterjectResponse.ReturnedDataList property for a definition of the required form. 5) Return the InterjectResponse object Call the InterjectRequestHandler.ReturnResponse() or InterjectRequestHandler.ReturnResponseAsync() method depending on your implementation to complete the pipeline and return the InterjectResponseDTO Note: For reverse compatibility reasons, the ReturnedData.Data property must be serialized prior to retuning the response to the caller. The InterjectRequestHandler.PackagedResponse property handles this to make it easier for development."
  }
}